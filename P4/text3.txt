The intent of the code is as follows: if no other thread holds the lock
when pthread mutex lock() is called, the thread will acquire the lock
and enter the critical section. If another thread does indeed hold the lock,
the thread trying to grab the lock will not return from the call until it has
acquired the lock (implying that the thread holding the lock has released
it via the unlock call). Of course, many threads may be stuck waiting
inside the lock acquisition function at a given time; only the thread with
the lock acquired, however, should call unlock.
Unfortunately, this code is broken, in two important ways. The first
problem is a lack of proper initialization. All locks must be properly
initialized in order to guarantee that they have the correct values to begin
with and thus work as desired when lock and unlock are called.
With POSIX threads, there are two ways to initialize locks. One way
to do this is to use PTHREAD MUTEX INITIALIZER, as follows:
pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;